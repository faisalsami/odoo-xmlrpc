{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Client, createClient, createSecureClient } from \"xmlrpc\";\n\nimport {\n  AbstractExecuteParams,\n  ExecuteKwParams,\n  OdooConfig,\n  RenderReportParams,\n} from \"./type\";\n\nclass Odoo {\n  config: OdooConfig;\n  host: string;\n  port: number;\n  db: string;\n  username: string;\n  password: string;\n  secure: boolean;\n  uid: number = 0;\n\n  constructor(config: OdooConfig) {\n    this.config = config;\n\n    const { hostname, port, protocol } = new URL(config.url);\n\n    this.host = hostname;\n    this.port = config.port || Number(port);\n    this.db = config.db;\n    this.username = config.username;\n    this.password = config.password;\n    this.secure = true;\n\n    if (protocol !== \"https:\") {\n      this.secure = false;\n    }\n    this.uid = 0;\n  }\n\n  private getClient(path: string): Client {\n    const createClientFn = this.secure ? createSecureClient : createClient;\n\n    return createClientFn({\n      host: this.host,\n      port: this.port,\n      path,\n    });\n  }\n\n  private methodCall(client: Client, method: string, params: any[] = []) {\n    return new Promise((resolve, reject) => {\n      client.methodCall(method, params, (err, value) => {\n        if (err) {\n          console.log(err);\n          return reject(err);\n        }\n        return resolve(value);\n      });\n    });\n  }\n\n  connect(): Promise<number> {\n    const client = this.getClient(\"/xmlrpc/2/common\");\n\n    return new Promise((resolve, reject) => {\n      client.methodCall(\n        \"authenticate\",\n        [this.db, this.username, this.password, {}],\n        (error, value) => {\n          if (error) {\n            return reject(error);\n          }\n\n          if (!value) {\n            return reject(new Error(\"No UID returned from authentication.\"));\n          }\n\n          this.uid = value;\n\n          return resolve(this.uid);\n        }\n      );\n    });\n  }\n\n  async execute<T = any>({ client, endpoint, params }: AbstractExecuteParams) {\n    try {\n      const value = await this.methodCall(client, endpoint, [\n        this.db,\n        this.uid,\n        this.password,\n        ...params,\n      ]);\n\n      return Promise.resolve(value as T);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  async execute_kw<T = any>({\n    model,\n    method,\n    params,\n  }: ExecuteKwParams): Promise<T> {\n    const client = this.getClient(\"/xmlrpc/2/object\");\n\n    return this.execute<T>({\n      client,\n      endpoint: \"execute_kw\",\n      params: [model, method, ...params],\n    });\n  }\n\n  async exec_workflow<T = any>({\n    model,\n    method,\n    params,\n  }: ExecuteKwParams): Promise<T> {\n    const client = this.getClient(\"/xmlrpc/2/object\");\n\n    return this.execute<T>({\n      client,\n      endpoint: \"exec_workflow\",\n      params: [model, method, ...params],\n    });\n  }\n\n  async render_report<T = any>({\n    report,\n    params,\n  }: RenderReportParams): Promise<T> {\n    const client = this.getClient(\"/xmlrpc/2/report\");\n\n    return this.execute<T>({\n      client,\n      endpoint: \"render_report\",\n      params: [report, ...params],\n    });\n  }\n}\n\nexport default Odoo;\n"],"mappings":"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","names":[]}